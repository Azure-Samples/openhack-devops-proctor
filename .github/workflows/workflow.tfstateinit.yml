name: 'tfstate-init'

on:
  workflow_dispatch:

# permissions: write-all

env:
  WORKDIR: 'provision-team/terraform-state-gh'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  # GITHUB_TOKEN: ${{ secrets.PAT }}

jobs:
  tfstateinit:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKDIR }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Download TF State from Artifacts
      uses: aochmann/actions-download-artifact@1.0.4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        name: TerraformState
        latest: true
        path: ${{ env.WORKDIR }}

    - name: Prepare Azure Service Principals
      id: azure-login
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        export ARM_CLIENT_ID=$(echo "${AZURE_CREDENTIALS}" | jq -r ".clientId")
        export ARM_CLIENT_SECRET=$(echo "${AZURE_CREDENTIALS}" | jq -r ".clientSecret")
        export ARM_SUBSCRIPTION_ID=$(echo "${AZURE_CREDENTIALS}" | jq -r ".subscriptionId")
        export ARM_TENANT_ID=$(echo "${AZURE_CREDENTIALS}" | jq -r ".tenantId")

        echo "ARM_CLIENT_ID=${ARM_CLIENT_ID}" >> "${GITHUB_ENV}"
        echo "ARM_CLIENT_SECRET=${ARM_CLIENT_SECRET}" >> "${GITHUB_ENV}"
        echo "ARM_SUBSCRIPTION_ID=${ARM_SUBSCRIPTION_ID}" >> "${GITHUB_ENV}"
        echo "ARM_TENANT_ID=${ARM_TENANT_ID}" >> "${GITHUB_ENV}"

        echo "::add-mask::$ARM_CLIENT_SECRET"
        
    # - name: Set Vars
    #   id: vars
    #   run: |
    #     IFS='/'
    #     read -a strarr <<< "${GITHUB_REPOSITORY}"
    #     export GITHUB_OWNER="${strarr[0]}"
    #     export GH_REPO_NAME="${strarr[1]}"
        
    #     echo "GITHUB_OWNER=${GITHUB_OWNER}" >> "${GITHUB_ENV}"
    #     echo "GH_REPO_NAME=${GH_REPO_NAME}" >> "${GITHUB_ENV}"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: |      
        terraform plan -var="gh_repo_name='"${GITHUB_REPOSITORY}"'"

    - name: Terraform Apply
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      # TODO: condition -> no run if tfplan no change
      run: |
        terraform apply -auto-approve -var="gh_repo_name=${GITHUB_REPOSITORY}"

    - name: Publish TF State to Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: TerraformState
        path: |
         ${{ env.WORKDIR }}/terraform.tfstate