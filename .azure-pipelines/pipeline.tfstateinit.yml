trigger:
- none

pool:
  vmImage: ubuntu-latest

steps:
  - task: DownloadBuildArtifacts@1
    continueOnError: true
    inputs:
      buildType: 'specific'
      project: $(System.TeamProjectId)
      pipeline: $(System.DefinitionId)
      buildVersionToDownload: 'latest'
      downloadType: 'single'
      artifactName: 'TF remote state'
      downloadPath: '$(System.DefaultWorkingDirectory)/provision-team/terraform-state/'
  - task: TerraformInstaller@0
    displayName: 'Terraform Install'
    inputs:
      terraformVersion: 'latest'
  - task: TerraformCLI@0
    displayName: 'Terraform Init'
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/provision-team/terraform-state/'
      allowTelemetryCollection: false
  - task: TerraformCLI@0
    displayName: 'Terraform Plan'
    inputs:
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/provision-team/terraform-state/'
      environmentServiceName: 'AzureServiceConnection'
      allowTelemetryCollection: false
    env:
      AZDO_PERSONAL_ACCESS_TOKEN: $(System.AccessToken)
      AZDO_ORG_SERVICE_URL: $(System.CollectionUri)
  - task: TerraformCLI@0
    displayName: 'Terraform Apply'
    inputs:
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/provision-team/terraform-state/'
      environmentServiceName: 'AzureServiceConnection'
      allowTelemetryCollection: false
    env:
      AZDO_PERSONAL_ACCESS_TOKEN: $(System.AccessToken)
      AZDO_ORG_SERVICE_URL: $(System.CollectionUri)
  - script: |
      cp $(System.DefaultWorkingDirectory)/provision-team/terraform-state/terraform.tfstate $(Build.ArtifactStagingDirectory)/terraform.tfstate
    displayName: "Copy TF State to Artifacts"
  - task: PublishPipelineArtifact@1
    displayName: "Publish TF State to Artifacts"
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'TF remote state'
      publishLocation: 'pipeline'